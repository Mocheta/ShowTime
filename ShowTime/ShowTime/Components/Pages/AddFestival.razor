@page "/add-festival"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.BusinessLogic.Services
@inject IFestivalService FestivalService
@inject NavigationManager Navigation
@inject IArtistService ArtistService
@rendermode InteractiveServer

<style>
    body {
        background-color: #26244d;
    }

    .add-festival-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        color: white;
    }

        .add-festival-container h3 {
            text-align: center;
            color: white;
            font-weight: bold;
            margin-bottom: 1.5rem;
        }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            color: white;
            font-weight: bold;
            display: block;
            margin-bottom: 0.5rem;
        }

    .artists-section {
        background-color: #3d3b6b;
        padding: 20px;
        border-radius: 8px;
        margin: 20px 0;
    }

    .artist-item {
        background-color: #4a4872;
        padding: 10px;
        margin: 5px 0;
        border-radius: 5px;
        display: flex;
        align-items: center;
    }

    .artist-checkbox {
        margin-right: 10px;
    }

    .selected-artists {
        background-color: #2a5d31;
        padding: 15px;
        border-radius: 8px;
        margin-top: 15px;
    }

    .selected-artist-tag {
        background-color: #28a745;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        margin: 3px;
        display: inline-block;
        font-size: 0.9rem;
    }

    .remove-artist {
        margin-left: 8px;
        cursor: pointer;
        font-weight: bold;
    }
</style>

<div class="add-festival-container">
	<h3>AddFestival</h3>


	<EditForm Model="newFestival" OnValidSubmit="HandleAddFestival" FormName="AddFestivalForm">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<label for="name">Name</label>
			<InputText id="name" class="form-control" @bind-Value="newFestival.Name" />
			<ValidationMessage For="@(() => newFestival.Name)" />
		</div>
		<div class="form-group">
			<label for="location">Location</label>
			<InputText id="location" class="form-control" @bind-Value="newFestival.Location" />
			<ValidationMessage For="@(() => newFestival.Location)" />
		</div>
		<div class="form-group">
			<label for="startDate">Start Date</label>
			<InputDate id="startDate" class="form-control" @bind-Value="newFestival.StartDate" />
			<ValidationMessage For="@(() => newFestival.StartDate)" />
		</div>
		<div class="form-group">
			<label for="endDate">End Date</label>
			<InputDate id="endDate" class="form-control" @bind-Value="newFestival.EndDate" />
			<ValidationMessage For="@(() => newFestival.EndDate)" />
		</div>
		<div class="form-group">
			<label for="splashArt">Splash Art URL</label>
			<InputText id="splashArt" class="form-control" @bind-Value="newFestival.SplashArt" />
			<ValidationMessage For="@(() => newFestival.SplashArt)" />
		</div>
        <div class="artists-section">
            <h4>Select Artists</h4>
            
            @if (availableArtists != null && availableArtists.Any())
            {
                <div class="form-group">
                    <label for="artistSearch">Search Artists:</label>
                    <InputText id="artistSearch" class="form-control" @bind-Value="artistSearchTerm" @oninput="FilterArtists" placeholder="Type to search artists..." />
                </div>

                <div style="max-height: 300px; overflow-y: auto;">
                    @foreach (var artist in filteredArtists)
                    {
                        <div class="artist-item">
                            <input type="checkbox" class="artist-checkbox" 
                                   checked="@IsArtistSelected(artist.Id)"
                                   @onchange="@((e) => ToggleArtistSelection(artist, e.Value as bool? ?? false))" />
                            <span>@artist.Name (@artist.Genre)</span>
                        </div>
                    }
                </div>
            }
            else if (isLoadingArtists)
            {
                <p>Loading artists...</p>
            }
            else
            {
                <p>No artists available. <a href="/add-artist" style="color: #28a745;">Add some artists first</a></p>
            }

            @if (selectedArtists.Any())
            {
                <div class="selected-artists">
                    <h5>Selected Artists (@selectedArtists.Count):</h5>
                    @foreach (var artist in selectedArtists)
                    {
                        <span class="selected-artist-tag">
                            @artist.Name
                            <span class="remove-artist" @onclick="@(() => RemoveArtist(artist))">×</span>
                        </span>
                    }
                </div>
            }
            </div>
		<button type="submit" class="btn btn-primary">Add Festival</button>
            <button type="button" class="btn btn-secondary ml-2" @onclick="@(() => Navigation.NavigateTo("/festivals"))">Cancel</button>
	</EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private FestivalCreateDto newFestival { get; set; } = new FestivalCreateDto();

    private IList<ArtistGetDto> availableArtists = new List<ArtistGetDto>();
    private IList<ArtistGetDto> filteredArtists = new List<ArtistGetDto>();
    private List<ArtistGetDto> selectedArtists = new List<ArtistGetDto>();
    private string artistSearchTerm = "";
    private bool isLoadingArtists = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadArtists();
    }

    private async Task LoadArtists()
    {
        try
        {
            isLoadingArtists = true;
            availableArtists = await ArtistService.GetAllArtistsAsync();
            filteredArtists = availableArtists.ToList();
            isLoadingArtists = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading artists: {ex.Message}");
            isLoadingArtists = false;
            StateHasChanged();
        }
    }

    private void FilterArtists(ChangeEventArgs e)
    {
        artistSearchTerm = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(artistSearchTerm))
        {
            filteredArtists = availableArtists.ToList();
        }
        else
        {
            filteredArtists = availableArtists
                .Where(a => a.Name.Contains(artistSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                           a.Genre.Contains(artistSearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }

    private bool IsArtistSelected(int artistId)
    {
        return selectedArtists.Any(a => a.Id == artistId);
    }

    private void ToggleArtistSelection(ArtistGetDto artist, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedArtists.Any(a => a.Id == artist.Id))
            {
                selectedArtists.Add(artist);
            }
        }
        else
        {
            selectedArtists.RemoveAll(a => a.Id == artist.Id);
        }
        StateHasChanged();
    }

    private void RemoveArtist(ArtistGetDto artist)
    {
        selectedArtists.RemoveAll(a => a.Id == artist.Id);
        StateHasChanged();
    }

    private async Task HandleAddFestival()
    {
        try
        {
            // Add the selected artist IDs to the festival DTO
            newFestival.ArtistIds = selectedArtists.Select(a => a.Id).ToList();

            await FestivalService.AddFestivalAsync(newFestival);
            Navigation.NavigateTo("/festivals");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding festival: {ex.Message}");
            // Handle error appropriately, e.g., show a message to the user
        }
    }

}
